package symbols;

import control.ChooseBox;

import javafx.scene.Cursor;

import javafx.scene.paint.Color;

import javafx.scene.shape.Circle;

import javafx.scene.text.Text;

/**
 * 
 * CCircle类继承Circle类
 * 
 * 
 * 
 * @author suisui
 *
 * 
 * 
 */

public class CCircle extends Circle {

	private boolean isElected = true; // 选中状态，默认没被选中

	private Text text; // 文本框

	private int type; // 图形类型

	private ChooseBox cBox = new ChooseBox();

	/**
	 * 
	 * 私有函数，初始化图形的属性
	 * 
	 */

	private void initialize() {

		this.setCursor(Cursor.HAND);

		this.setStroke(Color.BLACK);

		this.setFill(Color.WHITE);

		this.setStrokeWidth(1.3);

		this.setOnMouseClicked(e -> {
			drawElectBox();

		});

		this.setOnMouseDragged(e -> {

			drawElectBox();

			this.setCenterX(e.getX());

			this.setCenterY(e.getY());

		});

	}

	/**
	 * 
	 * CCircle构造函数
	 * 
	 * 
	 * 
	 * @param centerX
	 * 
	 *            圆心x坐标
	 * 
	 * @param centerY
	 * 
	 *            圆心y坐标
	 * 
	 * @param radius
	 * 
	 *            圆的半径
	 * 
	 */

	public CCircle(double centerX, double centerY, double radius) {

		super(centerX, centerY, radius);

		initialize();

	}

	public void drawElectBox() {
		isElected = true;

		Circle circles[] = cBox.getCircles();
		circles[0].setOnMouseDragged(e -> {
			this.setCenterX((e.getX()-circles[0].getCenterX())/2+this.getCenterX());
			this.setCenterY(((e.getY() - circles[0].getCenterY())) / 2 + this.getCenterY());
			if (e.getX() < circles[0].getCenterX() || e.getY() < circles[0].getCenterY()) {
				this.setRadius(this.getRadius()
						+ (distance(e.getX(), e.getY(), circles[0].getCenterX(), circles[0].getCenterY())) / 2);
			} else if (e.getX() >= circles[2].getCenterX() || e.getY() >= circles[7].getCenterY()) {
				this.setRadius(0);
			} else {
				this.setRadius(this.getRadius()
						- (distance(e.getX(), e.getY(), circles[0].getCenterX(), circles[0].getCenterY())) / 2);
			}
			cBox.draw(this.getCenterX() - this.getRadius(), this.getCenterY() - this.getRadius(), this.getRadius() * 2,
					this.getRadius() * 2);
		});

		circles[1].setOnMouseDragged(e -> {
			this.setCenterY(this.getCenterY() + (e.getY() - circles[0].getCenterY()) / 2);
			if (e.getY() < circles[7].getCenterY()) {
				this.setRadius((circles[0].getCenterY() - e.getY()) / 2 + this.getRadius());
			} else {
				this.setRadius(0);
			}
			cBox.draw(this.getCenterX() - this.getRadius(), this.getCenterY() - this.getRadius(), this.getRadius() * 2,
					this.getRadius() * 2);

		});

		circles[2].setOnMouseDragged(e -> {
			this.setCenterX((e.getX()-circles[2].getCenterX())/2+this.getCenterX());
			this.setCenterY((e.getY() - circles[2].getCenterY()) / 2 + this.getCenterY());
			if(e.getX()>circles[2].getCenterX()||e.getY()<circles[2].getCenterY()) {
				this.setRadius(this.getRadius()+(distance(e.getX(), e.getY(), circles[2].getCenterX(), circles[2].getCenterY()))/2);
			}else if(e.getX()<circles[0].getCenterX()||e.getY()>circles[7].getCenterY()) {
				this.setRadius(0);
			}else {
				this.setRadius(this.getRadius()-(distance(e.getX(), e.getY(), circles[2].getCenterX(), circles[2].getCenterY()))/2);
			}
			cBox.draw(this.getCenterX() - this.getRadius(), this.getCenterY() - this.getRadius(), this.getRadius() * 2,
					this.getRadius() * 2);
		});
		
		circles[3].setOnMouseDragged(e->{
			this.setCenterX((e.getX()-circles[3].getCenterX())/2+this.getCenterX());
			if(e.getX()<circles[4].getCenterX()) {
				this.setRadius((circles[3].getCenterX()-e.getX())/2+this.getRadius());

			}else {
				this.setRadius(0);
			}
			
			cBox.draw(this.getCenterX() - this.getRadius(), this.getCenterY() - this.getRadius(), this.getRadius() * 2,
					this.getRadius() * 2);
		});
		
		circles[4].setOnMouseDragged(e->{
			this.setCenterX((e.getX()-circles[4].getCenterX())/2+this.getCenterX());
			if(e.getX()>circles[3].getCenterX()) {
				this.setRadius((e.getX()-circles[4].getCenterX())/2+this.getRadius());
				
			}else {
				this.setRadius(0);
			}
			cBox.draw(this.getCenterX() - this.getRadius(), this.getCenterY() - this.getRadius(), this.getRadius() * 2,
					this.getRadius() * 2);
		});
		
		circles[5].setOnMouseDragged(e->{
			this.setCenterX((e.getX()-circles[5].getCenterX())/2+this.getCenterX());
			this.setCenterY(((e.getY() - circles[5].getCenterY())) / 2 + this.getCenterY());
			if (e.getX() < circles[5].getCenterX() || e.getY() > circles[5].getCenterY()) {
				this.setRadius(this.getRadius()
						+ (distance(e.getX(), e.getY(), circles[5].getCenterX(), circles[5].getCenterY())) / 2);
			} else if (e.getX() > circles[2].getCenterX() || e.getY() < circles[2].getCenterY()) {
				this.setRadius(0);
			} else {
				this.setRadius(this.getRadius()
						- (distance(e.getX(), e.getY(), circles[5].getCenterX(), circles[5].getCenterY())) / 2);
			}
			cBox.draw(this.getCenterX() - this.getRadius(), this.getCenterY() - this.getRadius(), this.getRadius() * 2,
					this.getRadius() * 2);
		});
		
		circles[6].setOnMouseDragged(e->{
			this.setCenterY((e.getY()-circles[6].getCenterY())/2+this.getCenterY());
			if(e.getY()>circles[1].getCenterY()) {
				this.setRadius((e.getY()-circles[6].getCenterY())/2+this.getRadius());
			}else {
				this.setRadius(0);
			}
			cBox.draw(this.getCenterX() - this.getRadius(), this.getCenterY() - this.getRadius(), this.getRadius() * 2,
					this.getRadius() * 2);
		});
		
		circles[7].setOnMouseDragged(e->{
			this.setCenterX((e.getX()-circles[7].getCenterX())/2+this.getCenterX());
			this.setCenterY(((e.getY() - circles[7].getCenterY())) / 2 + this.getCenterY());
			if (e.getX() > circles[7].getCenterX() || e.getY() > circles[7].getCenterY()) {
				this.setRadius(this.getRadius()
						+ (distance(e.getX(), e.getY(), circles[7].getCenterX(), circles[7].getCenterY())) / 2);
			} else if (e.getX() < circles[0].getCenterX() || e.getY() < circles[0].getCenterY()) {
				this.setRadius(0);
			} else {
				this.setRadius(this.getRadius()
						- (distance(e.getX(), e.getY(), circles[7].getCenterX(), circles[7].getCenterY())) / 2);
			}
			cBox.draw(this.getCenterX() - this.getRadius(), this.getCenterY() - this.getRadius(), this.getRadius() * 2,
					this.getRadius() * 2);
		});
		cBox.draw(this.getCenterX() - this.getRadius(), this.getCenterY() - this.getRadius(), this.getRadius() * 2,
				this.getRadius() * 2);
	}

	private double distance(double x1, double y1, double x2, double y2) {
		return Math.sqrt(Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2));
	}
	// getters & setters

	public boolean isElected() {

		return isElected;

	}

	public void setElected(boolean isElected) {

		this.isElected = isElected;

	}

	public Text getText() {

		return text;

	}

	public void setText(Text text) {

		this.text = text;

	}

	public int getType() {

		return type;

	}

	public void setType(int type) {

		this.type = type;

	}

	public ChooseBox getcBox() {

		return cBox;

	}

	public void setcBox(ChooseBox cBox) {

		this.cBox = cBox;

	}

}
