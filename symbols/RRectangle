package symbols;

import control.ChooseBox;
import javafx.scene.Cursor;

import javafx.scene.layout.Pane;

import javafx.scene.paint.Color;

import javafx.scene.paint.Paint;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;

import javafx.scene.text.Text;

/**
 * 
 * RRectangle类继承Rectangle 新增数据域：选中状态、文本框、图形类型 新增函数：draw()
 * 
 * 
 * 
 * @author suisui
 *
 * 
 * 
 */

public class RRectangle extends Rectangle {

	private boolean isElected = true; // 选中状态，默认没被选中

	private Text text; // 文本框

	private int type; // 图形类型

	private ChooseBox cBox = new ChooseBox();

	// public void draw(Pane pane) {

	// this.setY((pane.getPrefHeight() - this.getHeight()) / 2);

	// this.setX((pane.getPrefWidth() - this.getWidth()) / 2);

	//// pane.getChildren().add(this);

	//

	// }

	// 画出判断框（未完善）

	public void drawElectBox() {
		isElected = true;

		if (isElected) {
			Circle circles[] = cBox.getCircles();

			circles[0].setOnMouseDragged(e -> {
				// cBoxWidth = circles[0].getCenterX() - e.getX() + cBoxWidth;
				this.setWidth(circles[0].getCenterX() - e.getX() + this.getWidth());
				// cBoxHeight = circles[0].getCenterY() - e.getY() + cBoxHeight;
				this.setHeight(circles[0].getCenterY() - e.getY() + this.getHeight());
				if (e.getX() < circles[2].getCenterX()) {// 因为此时的2的x值和7的y值是不变的
					// cBoxX = e.getX();
					this.setX(e.getX() + cBox.getOffset());
				} else {
					// cBoxX = circles[2].getCenterX();
					this.setX(circles[2].getCenterX());
					// cBoxWidth = 0;
					this.setWidth(0);
				}
				if (e.getY() < circles[7].getCenterY()) {
					// cBoxY = e.getY();
					this.setY(e.getY() + cBox.getOffset());
				} else {
					// cBoxY = circles[7].getCenterY();
					this.setY(circles[7].getCenterY() + cBox.getOffset());
					// cBoxHeight = 0;
					this.setHeight(0);
				}
				// this.setX(cBoxX+offset);
				// this.setY(cBoxY+offset);
				// this.setWidth(cBoxWidth-offset*2);
				// this.setHeight(cBoxHeight-offset*2);
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());
				// draw(cBoxX + offset, cBoxY + offset, cBoxWidth - offset * 2, cBoxHeight -
				// offset * 2);// 倒推x,y,width,height
			});

			circles[1].setOnMouseDragged(e -> {
				// cBoxHeight = circles[1].getCenterY() - e.getY() + cBoxHeight;
				this.setHeight(circles[1].getCenterY() - e.getY() + this.getHeight());
				if (e.getY() < circles[7].getCenterY()) {
					// cBoxY = e.getY();
					this.setY(e.getY() + cBox.getOffset());
				} else {
					// cBoxY = circles[7].getCenterY();
					this.setY(circles[7].getCenterY() + cBox.getOffset());
					// cBoxHeight = 0;
					this.setHeight(0);
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());
				// draw(cBoxX + offset, cBoxY + offset, cBoxWidth - offset * 2, cBoxHeight -
				// offset * 2);// 倒推x,y,width,height
			});
			//
			circles[2].setOnMouseDragged(e -> {
				// cBoxWidth = e.getX() - circles[2].getCenterX() + cBoxWidth;
				this.setWidth(e.getX() - circles[2].getCenterX() + this.getWidth());
				// cBoxHeight = circles[2].getCenterY() - e.getY() + cBoxHeight;
				this.setHeight(circles[2].getCenterY() - e.getY() + this.getHeight());
				if (e.getX() < circles[0].getCenterX()) {
					// cBoxWidth = 0;
					this.setWidth(0);
				}
				if (e.getY() < circles[7].getCenterY()) {
					// cBoxY = e.getY();
					this.setY(e.getY() + cBox.getOffset());
				} else {
					// cBoxHeight = 0;
					this.setHeight(0);
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());

				// draw(cBoxX + offset, cBoxY + offset, cBoxWidth - offset * 2, cBoxHeight -
				// offset * 2);// 倒推x,y,width,height
			});
			circles[3].setOnMouseDragged(e -> {
				// cBoxWidth = circles[3].getCenterX() - e.getX() + cBoxWidth;
				this.setWidth(circles[3].getCenterX() - e.getX() + this.getWidth());
				if (e.getX() < circles[2].getCenterX()) {
					// cBoxX = e.getX();
					this.setX(e.getX() + cBox.getOffset());
				} else {
					// cBoxWidth = 0;
					this.setWidth(0);
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());

				// draw(cBoxX + offset, cBoxY + offset, cBoxWidth - offset * 2, cBoxHeight -
				// offset * 2);// 倒推x,y,width,height
			});

			circles[4].setOnMouseDragged(e -> {
				// cBoxWidth = e.getX() - circles[4].getCenterX() + cBoxWidth;
				this.setWidth(e.getX() - circles[4].getCenterX() + this.getWidth());
				if (e.getX() < circles[0].getCenterX()) {
					// cBoxWidth = 0;
					this.setWidth(0);
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());

				// draw(cBoxX + offset, cBoxY + offset, cBoxWidth - offset * 2, cBoxHeight -
				// offset * 2);// 倒推x,y,width,height
			});

			circles[5].setOnMouseDragged(e -> {
				// cBoxWidth = circles[5].getCenterX() - e.getX() + cBoxWidth;
				this.setWidth(circles[5].getCenterX() - e.getX() + this.getWidth());
				// cBoxHeight = e.getY() - circles[5].getCenterY() + cBoxHeight;
				this.setHeight(e.getY() - circles[5].getCenterY() + this.getHeight());
				if (e.getX() < circles[2].getCenterX()) {
					// cBoxX = e.getX();
					this.setX(e.getX() + cBox.getOffset());
				} else {
					// cBoxWidth = 0;
					this.setWidth(0);
				}
				if (e.getY() < circles[2].getCenterY()) {
					// cBoxHeight=0;
					this.setHeight(0);
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());

				// draw(cBoxX + offset, cBoxY + offset, cBoxWidth - offset * 2, cBoxHeight -
				// offset * 2);// 倒推x,y,width,height

			});

			circles[6].setOnMouseDragged(e -> {
				// cBoxHeight =e.getY()-circles[6].getCenterY()+cBoxHeight;
				this.setHeight(e.getY() - circles[6].getCenterY() + this.getHeight());
				if (e.getY() < circles[0].getCenterY()) {
					// cBoxHeight=0;
					this.setHeight(0);
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());

				// draw(cBoxX + offset, cBoxY + offset, cBoxWidth - offset * 2, cBoxHeight -
				// offset * 2);// 倒推x,y,width,height

			});

			circles[7].setOnMouseDragged(e -> {
				// cBoxWidth=e.getX()-circles[7].getCenterX()+cBoxWidth;
				this.setWidth(e.getX() - circles[7].getCenterX() + this.getWidth());
				// cBoxHeight=e.getY()-circles[7].getCenterY()+cBoxHeight;
				this.setHeight(e.getY() - circles[7].getCenterY() + this.getHeight());
				if (e.getX() < circles[0].getCenterX()) {
					// cBoxWidth=0;
					this.setWidth(0);
				}
				if (e.getY() < circles[0].getCenterY()) {
					// cBoxHeight=0;
					this.setHeight(0);
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());

				// draw(cBoxX + offset, cBoxY + offset, cBoxWidth - offset * 2, cBoxHeight -
				// offset * 2);// 倒推x,y,width,height

			});

			cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());

			// double parameter[] = cBox.Zoom(this);
			// this.setX(parameter[0]);
			// this.setY(parameter[1]);
			// this.setWidth(parameter[2]);
			// this.setHeight(parameter[3]);
			//

			// pane.getChildren().add(control);

		}

	}

	// private boolean isSelect(double x, double y) { // 传入鼠标坐标判断是否被选中

	// isElected = false;

	// if (x >= this.getX() && x <= this.getX() + this.getWidth()) {

	// if (y <= this.getY() && y >= y - this.getHeight()) {

	// isElected = true;

	// }

	// }

	// return isElected;

	// }

	private void initialize() {

		this.setCursor(Cursor.HAND);

		this.setStroke(Color.BLACK);

		this.setFill(Color.WHITE);

		this.setStrokeWidth(1.3);

		this.setOnMouseClicked(e -> {

			drawElectBox();

			// cBox.Zoom();
		});

		this.setOnMouseDragged(e -> {

			drawElectBox();

			this.setX(e.getX() - this.getWidth() / 2);

			this.setY(e.getY() - this.getHeight() / 2);

		});

	}

	/**
	 * 
	 * RRectangle构造方法
	 * 
	 */

	public RRectangle() {

		super();

		initialize();

	}

	/**
	 * 
	 * RRectangle构造方法
	 * 
	 * 
	 * 
	 * @param width
	 * 
	 *            矩形的宽
	 * 
	 * @param height
	 * 
	 *            矩形的长
	 * 
	 */

	public RRectangle(double width, double height) {

		super(width, height);

		initialize();

	}

	/**
	 * 
	 * RRectangle构造方法
	 * 
	 * 
	 * 
	 * @param width
	 * 
	 *            矩形的宽
	 * 
	 * @param height
	 * 
	 *            矩形的长
	 * 
	 * @param text
	 * 
	 *            文本框
	 * 
	 */

	public RRectangle(double width, double height, Text text) {

		this(width, height);

		this.text = text;

		initialize();

	}

	/**
	 * 
	 * RRectangle构造方法
	 * 
	 * 
	 * 
	 * @param x
	 * 
	 *            矩形左上角的x坐标
	 * 
	 * @param y
	 * 
	 *            矩形左上角的y坐标
	 * 
	 * @param width
	 * 
	 *            矩形的宽
	 * 
	 * @param height
	 * 
	 *            矩形的长
	 * 
	 */

	public RRectangle(double x, double y, double width, double height) {

		super(x, y, width, height);

		initialize();

	}

	// getters & setters

	public boolean isElected() {

		return isElected;

	}

	public void setEelected(boolean isElected) {

		this.isElected = isElected;

	}

	public Text getText() {

		return text;

	}

	public void setText(Text text) {

		this.text = text;

	}

	public int getType() {

		return type;

	}

	public void setType(int type) {

		this.type = type;

	}

	public ChooseBox getcBox() {
		return cBox;
	}

}
