package symbols;

import control.ChooseBox;
import javafx.scene.Cursor;

import javafx.scene.layout.Pane;

import javafx.scene.paint.Color;

import javafx.scene.paint.Paint;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;

import javafx.scene.text.Text;

/**
 * 
 * RRectangle类继承Rectangle 新增数据域：选中状态、文本框、图形类型 新增函数：draw()
 * 
 * 
 * 
 * @author suisui
 *
 * 
 * 
 */

public class RRectangle extends Rectangle {

	private boolean isElected = true; // 选中状态，默认没被选中

	private Text text; // 文本框

	private int type; // 图形类型

	private ChooseBox cBox = new ChooseBox();

	// public void draw(Pane pane) {

	// this.setY((pane.getPrefHeight() - this.getHeight()) / 2);

	// this.setX((pane.getPrefWidth() - this.getWidth()) / 2);

	//// pane.getChildren().add(this);

	//

	// }

	public void drawElectBox() {
		isElected = true;

			Circle circles[] = cBox.getCircles();
			circles[0].setOnMouseDragged(e -> {
				if(e.getX()<circles[7].getCenterX()) {
					this.setWidth(circles[0].getCenterX() - e.getX() + this.getWidth());
					this.setX(e.getX()-circles[0].getCenterX()+this.getX());
				}
				if(e.getY()<circles[7].getCenterY()) {
					this.setY(e.getY()-circles[0].getCenterY()+this.getY());
					this.setHeight(circles[0].getCenterY()-e.getY()+this.getHeight());
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());
			});

			circles[1].setOnMouseDragged(e -> {
				if(e.getY()<circles[6].getCenterY()) {
					this.setY(e.getY()-circles[1].getCenterY()+this.getY());
					this.setHeight(circles[1].getCenterY()-e.getY()+this.getHeight());
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());
			});

			circles[2].setOnMouseDragged(e -> {
				if(e.getX()>circles[5].getCenterX()) {
					this.setWidth(e.getX()-circles[2].getCenterX()+this.getWidth());
				}
				if(e.getY()<circles[5].getCenterY()) {
					this.setY(e.getY()-circles[2].getCenterY()+this.getY());
					this.setHeight(circles[2].getCenterY()-e.getY()+this.getHeight());
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());
			});
			circles[3].setOnMouseDragged(e -> {
				
				if (e.getX() < circles[2].getCenterX()) {
					this.setWidth(circles[3].getCenterX() - e.getX() + this.getWidth());
					this.setX(e.getX()-circles[3].getCenterX()+this.getX());
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());
			});

			circles[4].setOnMouseDragged(e -> {
				
				if (e.getX() > circles[3].getCenterX()) {
					this.setWidth(e.getX() - circles[4].getCenterX() + this.getWidth());
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());
			});

			circles[5].setOnMouseDragged(e -> {
				if(e.getX()<circles[2].getCenterX()) {
					this.setX(e.getX()-circles[5].getCenterX()+this.getX());
					this.setWidth(circles[5].getCenterX()-e.getX()+this.getWidth());
				}
				if(e.getY()>circles[2].getCenterY()) {
					this.setHeight(e.getY()-circles[5].getCenterY()+this.getHeight());
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());
			});

			circles[6].setOnMouseDragged(e -> {
				if(e.getY()>circles[1].getCenterY()) {
					this.setHeight(e.getY()-circles[6].getCenterY()+this.getHeight());
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());
			});

			circles[7].setOnMouseDragged(e -> {
				if(e.getX()>circles[0].getCenterX()) {
					this.setWidth(e.getX()-circles[7].getCenterX()+this.getWidth());
				}
				if(e.getY()>circles[0].getCenterY()) {
					this.setHeight(e.getY()-circles[7].getCenterY()+this.getHeight());
				}
				cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());
			});
			cBox.draw(this.getX(), this.getY(), this.getWidth(), this.getHeight());

		

	}

	private void initialize() {

		this.setCursor(Cursor.HAND);

		this.setStroke(Color.BLACK);

		this.setFill(Color.WHITE);

		this.setStrokeWidth(1.3);

		this.setOnMouseClicked(e -> {

			drawElectBox();

		});

		this.setOnMouseDragged(e -> {

			drawElectBox();

			this.setX(e.getX() - this.getWidth() / 2);

			this.setY(e.getY() - this.getHeight() / 2);

		});

	}

	/**
	 * 
	 * RRectangle构造方法
	 * 
	 */

	public RRectangle() {

		super();

		initialize();

	}

	/**
	 * 
	 * RRectangle构造方法
	 * 
	 * 
	 * 
	 * @param width
	 * 
	 *            矩形的宽
	 * 
	 * @param height
	 * 
	 *            矩形的长
	 * 
	 */

	public RRectangle(double width, double height) {

		super(width, height);

		initialize();

	}

	/**
	 * 
	 * RRectangle构造方法
	 * 
	 * 
	 * 
	 * @param width
	 * 
	 *            矩形的宽
	 * 
	 * @param height
	 * 
	 *            矩形的长
	 * 
	 * @param text
	 * 
	 *            文本框
	 * 
	 */

	public RRectangle(double width, double height, Text text) {

		this(width, height);

		this.text = text;

		initialize();

	}

	/**
	 * 
	 * RRectangle构造方法
	 * 
	 * 
	 * 
	 * @param x
	 * 
	 *            矩形左上角的x坐标
	 * 
	 * @param y
	 * 
	 *            矩形左上角的y坐标
	 * 
	 * @param width
	 * 
	 *            矩形的宽
	 * 
	 * @param height
	 * 
	 *            矩形的长
	 * 
	 */

	public RRectangle(double x, double y, double width, double height) {

		super(x, y, width, height);

		initialize();

	}

	// getters & setters

	public boolean isElected() {

		return isElected;

	}

	public void setEelected(boolean isElected) {

		this.isElected = isElected;

	}

	public Text getText() {

		return text;

	}

	public void setText(Text text) {

		this.text = text;

	}

	public int getType() {

		return type;

	}

	public void setType(int type) {

		this.type = type;

	}

	public ChooseBox getcBox() {
		return cBox;
	}

}
